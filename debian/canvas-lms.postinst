#!/bin/bash

BASEDIR=/var/rails/canvas-lms
HOMEDIR=/var/lib/canvas-lms
USERNAME=canvas-lms-user
LOCALPATH=/var/lib/gems/1.8/bin:/usr/local/sbin:/usr/local/bin:$PATH
WARNING="# Warning! This file was autogenerated by debconf.
# Please run dpkg-reconfigure -plow canvas-lms instead of editing this file.
"

set -e

. /usr/share/debconf/confmodule

case "$1" in
  configure)
  ;;

  abort-upgrade|abort-remove|abort-deconfigure)
    exit 0
  ;;

  *)
    echo "postinst called with unknown argument '$1'" >&2
    exit 1
  ;;
esac

function get_config {
  db_get "$1" || exit 1
  echo "$RET" | sed 's/"//g' | sed 's/\\//g'
}

function make_amazon_s3_yml {
  echo -en "$WARNING
production:
  bucket_name: \"$(get_config canvas-lms/s3/bucket-name)\"
  access_key_id: \"$(get_config canvas-lms/s3/access-key-id)\"
  secret_access_key: \"$(get_config canvas-lms/s3/secret-access-key)\"
" > $BASEDIR/config/amazon_s3.yml
}

function make_database_yml {
  echo -en "$WARNING
production:
  adapter: $(get_config canvas-lms/db/adapter)
  encoding: utf8
  database: \"$(get_config canvas-lms/db/database)\"
  host: \"$(get_config canvas-lms/db/host)\"
  username: \"$(get_config canvas-lms/db/username)\"
  timeout: 5000
" > $BASEDIR/config/database.yml
  if [ -n "$(get_config canvas-lms/db/password)" ]; then
    echo -en "  password: \"$(get_config canvas-lms/db/password)\"
" >> $BASEDIR/config/database.yml
  fi
  if [ "$(get_config canvas-lms/db/queue-uses-same-db)" = "no" ]; then
    echo -en "  queue:
    adapter: $(get_config canvas-lms/db/queue-adapter)
    encoding: utf8
    database: \"$(get_config canvas-lms/db/queue-database)\"
    host: \"$(get_config canvas-lms/db/queue-host)\"
    username: \"$(get_config canvas-lms/db/queue-username)\"
    timeout: 5000
" >> $BASEDIR/config/database.yml
    if [ -n "$(get_config canvas-lms/db/queue-password)" ]; then
      echo -en "    password: \"$(get_config canvas-lms/db/queue-password)\"
" >> $BASEDIR/config/database.yml
    fi
  fi
}

function make_domain_yml {
  echo -en "$WARNING
production:
  domain: \"$(get_config canvas-lms/domain)\"
  files_domain: \"$(get_config canvas-lms/file-domain)\"
" > $BASEDIR/config/domain.yml
}

function make_file_store_yml {
  echo -en "$WARNING
production:
  storage: $(get_config canvas-lms/file-storage)
  path: \"$(get_config canvas-lms/local/path)\"
" > $BASEDIR/config/file_store.yml
}

function make_outgoing_mail_yml {
  echo -en "$WARNING
production:
  domain: \"$(get_config canvas-lms/mail/domain)\"
  outgoing_address: \"$(get_config canvas-lms/mail/outgoing-address)\"
" > $BASEDIR/config/outgoing_mail.yml
  if [ "$(get_config canvas-lms/mail/type)" = "smtp" ]; then
    echo -en "  address: \"$(get_config canvas-lms/smtp/address)\"
  port: \"$(get_config canvas-lms/smtp/port)\"
" >> $BASEDIR/config/outgoing_mail.yml
    if [ "$(get_config canvas-lms/smtp/use-auth)" = "yes" ]; then
      echo -en "  user_name: \"$(get_config canvas-lms/smtp/username)\"
  password: \"$(get_config canvas-lms/smtp/password)\"
  authentication: $(get_config canvas-lms/smtp/auth-style)
" >> $BASEDIR/config/outgoing_mail.yml
    fi
    if [ "$(get_config canvas-lms/smtp/starttls-auto)" = "yes" ]; then
      echo -en "  enable_starttls_auto: true\n" >> $BASEDIR/config/outgoing_mail.yml
    else
      echo -en "  enable_starttls_auto: false\n" >> $BASEDIR/config/outgoing_mail.yml
    fi
  else
    echo -en "  delivery_method: \"sendmail\"\n" >> $BASEDIR/config/outgoing_mail.yml
  fi
}

function make_delayed_jobs_yml {
  if [ -e $BASEDIR/config/delayed_jobs.yml ]; then return; fi
  cp $BASEDIR/config/delayed_jobs.yml.example $BASEDIR/config/delayed_jobs.yml
}

function make_apache_config {
  mkdir -p /etc/apache2/sites-available

  echo -en "<VirtualHost *:80>
  ServerName $(get_config canvas-lms/domain)
  ServerAlias $(get_config canvas-lms/file-domain)
  ServerAdmin $(get_config canvas-lms/admin-email)
  DocumentRoot /var/rails/canvas-lms/public
  RewriteEngine On
  RewriteCond %{HTTP:X-Forwarded-Proto} !=https
  RewriteCond %{REQUEST_URI} !^/health_check
  RewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI} [L]  
  ErrorLog /var/log/apache2/canvas_errors.log
  LogLevel warn
  CustomLog /var/log/apache2/canvas_access.log combined
  <Directory /var/rails/canvas-lms/public>
    Allow from all
    Options -MultiViews
  </Directory>
</VirtualHost>
<VirtualHost *:443>
  ServerName $(get_config canvas-lms/domain)
  ServerAlias $(get_config canvas-lms/file-domain)
  ServerAdmin $(get_config canvas-lms/admin-email)
  DocumentRoot /var/rails/canvas-lms/public
  ErrorLog /var/log/apache2/canvas_errors.log
  LogLevel warn
  CustomLog /var/log/apache2/canvas_ssl_access.log combined
  SSLEngine on
  BrowserMatch \"MSIE [2-6]\" nokeepalive ssl-unclean-shutdown downgrade-1.0 force-response-1.0
  BrowserMatch \"MSIE [17-9]\" ssl-unclean-shutdown
  # the following ssl certificate files are generated for you from the ssl-cert package.
  SSLCertificateFile $(get_config canvas-lms/ssl/cert)
  SSLCertificateKeyFile $(get_config canvas-lms/ssl/certkey)
  <Directory /var/rails/canvas-lms/public>
    Allow from all
    Options -MultiViews
  </Directory>
</VirtualHost>
" > /etc/apache2/sites-available/canvas-lms.template

  if ! [ -e /etc/apache2/sites-available/canvas-lms ]; then
    cp /etc/apache2/sites-available/canvas-lms.template /etc/apache2/sites-available/canvas-lms
  fi
}

function make_security_yml {
  if [ -e $BASEDIR/config/security.yml ]; then return; fi
  echo -en 'production:\n  encryption_key: "' > $BASEDIR/config/security.yml
  echo -n $(head --bytes=24 /dev/urandom | base64) >> $BASEDIR/config/security.yml
  echo -e '"\n\ndevelopment:\n  encryption_key: 12345\n\ntest:\n  encryption_key: 12345' >> $BASEDIR/config/security.yml
}

function add_configs {
  echo "writing canvas configs..."
  make_amazon_s3_yml
  make_database_yml
  make_domain_yml
  make_file_store_yml
  make_outgoing_mail_yml
  make_delayed_jobs_yml
  make_apache_config
  make_security_yml
}

function fix_ownership {
  echo "fixing canvas ownership..."
  getent passwd $USERNAME >/dev/null || adduser --system --home $HOMEDIR \
      --disabled-password --shell /bin/sh $USERNAME
  touch $BASEDIR/Gemfile.lock
  touch $BASEDIR/db/schema.rb
  chown $USERNAME $BASEDIR/{config/environment.rb,log,tmp/pids,tmp,public/assets} \
      $BASEDIR/{public/stylesheets/compiled,Gemfile.lock,db/schema.rb,.bundle} \
      $BASEDIR/config/*.yml
  chmod 400 $BASEDIR/config/*.yml
  chown $USERNAME $HOMEDIR
}

function setup_gems {
  echo "setting up canvas gems..."
  PATH=$LOCALPATH HOME=$HOMEDIR gem install bundler --no-ri --no-rdoc
  pushd $BASEDIR
  chown -R $USERNAME vendor/bundle .bundle
  su $USERNAME -c "/usr/bin/env \
    PATH=\"$LOCALPATH\" \
    HOME=\"$HOMEDIR\" \
    /usr/bin/env \
    bundle install --path $BASEDIR/vendor/bundle"
  chown -R root vendor/bundle .bundle
  popd
}

add_configs
fix_ownership
setup_gems
update-rc.d canvas-lms defaults

exit 0
